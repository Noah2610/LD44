!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/3fdf28bc/
Bullet	src/components/bullet.rs	/^impl Bullet {$/;"	c
Bullet	src/components/bullet.rs	/^impl Component for Bullet {$/;"	c
Bullet	src/components/bullet.rs	/^pub struct Bullet {$/;"	s
BulletBuilder	src/components/bullet.rs	/^impl BulletBuilder {$/;"	c
BulletBuilder	src/components/bullet.rs	/^pub struct BulletBuilder {$/;"	s
BulletOwner	src/components/bullet.rs	/^pub enum BulletOwner {$/;"	g
BulletShoot	src/components/item.rs	/^    BulletShoot,$/;"	e	enum:ItemType
BulletSystem	src/systems/bullet.rs	/^impl<'a> System<'a> for BulletSystem {$/;"	c
BulletSystem	src/systems/bullet.rs	/^pub struct BulletSystem;$/;"	s
Charger	src/components/enemy.rs	/^    Charger(EnemyAiChargerData),$/;"	e	enum:EnemyAi
Charger	src/components/enemy.rs	/^    Charger,$/;"	e	enum:EnemyType
CustomData	src/main.rs	/^pub struct CustomData {$/;"	s
DamageUp	src/components/item.rs	/^    DamageUp,$/;"	e	enum:ItemType
DebugSystem	src/systems/debug.rs	/^impl Default for DebugSystem {$/;"	c
DebugSystem	src/systems/debug.rs	/^impl<'a> System<'a> for DebugSystem {$/;"	c
DebugSystem	src/systems/debug.rs	/^pub struct DebugSystem {$/;"	s
Default	src/solid_tag.rs	/^    Default,$/;"	e	enum:SolidTag
Enemy	src/components/bullet.rs	/^    Enemy,$/;"	e	enum:BulletOwner
Enemy	src/components/enemy.rs	/^impl Component for Enemy {$/;"	c
Enemy	src/components/enemy.rs	/^impl Enemy {$/;"	c
Enemy	src/components/enemy.rs	/^pub struct Enemy {$/;"	s
Enemy	src/solid_tag.rs	/^    Enemy,$/;"	e	enum:SolidTag
EnemyAi	src/components/enemy.rs	/^impl Component for EnemyAi {$/;"	c
EnemyAi	src/components/enemy.rs	/^pub enum EnemyAi {$/;"	g
EnemyAiChargerData	src/components/enemy.rs	/^pub struct EnemyAiChargerData {$/;"	s
EnemyAiSystem	src/systems/enemy_ai.rs	/^impl<'a> System<'a> for EnemyAiSystem {$/;"	c
EnemyAiSystem	src/systems/enemy_ai.rs	/^pub struct EnemyAiSystem;$/;"	s
EnemyAiTurretData	src/components/enemy.rs	/^impl Default for EnemyAiTurretData {$/;"	c
EnemyAiTurretData	src/components/enemy.rs	/^pub struct EnemyAiTurretData {$/;"	s
EnemyType	src/components/enemy.rs	/^pub enum EnemyType {$/;"	g
EntityData	src/states/ingame/level_loader/mod.rs	/^struct EntityData {$/;"	s
ExtraJump	src/components/item.rs	/^    ExtraJump,$/;"	e	enum:ItemType
Facing	src/components/enemy.rs	/^impl Default for Facing {$/;"	c
Facing	src/components/enemy.rs	/^pub enum Facing {$/;"	g
Flying	src/components/enemy.rs	/^    Flying,$/;"	e	enum:EnemyType
Goal	src/components/goal.rs	/^impl Component for Goal {$/;"	c
Goal	src/components/goal.rs	/^pub struct Goal {$/;"	s
GoalSystem	src/systems/goal.rs	/^impl<'a> System<'a> for GoalSystem {$/;"	c
GoalSystem	src/systems/goal.rs	/^pub struct GoalSystem;$/;"	s
Graphic	src/states/ingame/level_loader/mod.rs	/^enum Graphic {$/;"	g
HealthDisplaySystem	src/systems/health_display.rs	/^impl<'a> System<'a> for HealthDisplaySystem {$/;"	c
HealthDisplaySystem	src/systems/health_display.rs	/^pub struct HealthDisplaySystem {$/;"	s
Heart	src/components/heart.rs	/^impl Component for Heart {$/;"	c
Heart	src/components/heart.rs	/^impl Heart {$/;"	c
Heart	src/components/heart.rs	/^pub struct Heart {$/;"	s
Ingame	src/states/ingame/mod.rs	/^impl Ingame {$/;"	c
Ingame	src/states/ingame/mod.rs	/^impl<'a, 'b> State<CustomGameData<'a, 'b, CustomData>, StateEvent> for Ingame {$/;"	c
Ingame	src/states/ingame/mod.rs	/^pub struct Ingame {$/;"	s
InvertVelocity	src/settings.rs	/^    InvertVelocity, \/\/ 2$/;"	e	enum:SettingsPlayerQuickTurnaround
Item	src/components/item.rs	/^impl Component for Item {$/;"	c
Item	src/components/item.rs	/^impl Item {$/;"	c
Item	src/components/item.rs	/^pub struct Item {$/;"	s
ItemType	src/components/item.rs	/^impl ItemType {$/;"	c
ItemType	src/components/item.rs	/^impl<T> From<T> for ItemType$/;"	c
ItemType	src/components/item.rs	/^pub enum ItemType {$/;"	g
ItemsData	src/components/player.rs	/^pub struct ItemsData {$/;"	s
JumpUp	src/components/item.rs	/^    JumpUp,$/;"	e	enum:ItemType
Knockback	src/components/item.rs	/^    Knockback,$/;"	e	enum:ItemType
Left	src/components/enemy.rs	/^    Left,$/;"	e	enum:Facing
LevelLoader	src/states/ingame/level_loader/mod.rs	/^impl LevelLoader {$/;"	c
LevelLoader	src/states/ingame/level_loader/mod.rs	/^pub struct LevelLoader {$/;"	s
LevelManager	src/states/ingame/level_manager.rs	/^impl LevelManager {$/;"	c
LevelManager	src/states/ingame/level_manager.rs	/^pub struct LevelManager {$/;"	s
No	src/settings.rs	/^    No,             \/\/ 0$/;"	e	enum:SettingsPlayerQuickTurnaround
Normal	src/components/enemy.rs	/^    Normal,$/;"	e	enum:EnemyType
Player	src/components/bullet.rs	/^    Player,$/;"	e	enum:BulletOwner
Player	src/components/player.rs	/^impl Component for Player {$/;"	c
Player	src/components/player.rs	/^impl Player {$/;"	c
Player	src/components/player.rs	/^pub struct Player {$/;"	s
Player	src/solid_tag.rs	/^    Player,$/;"	e	enum:SolidTag
PlayerAttack	src/components/player_attack.rs	/^impl Component for PlayerAttack {$/;"	c
PlayerAttack	src/components/player_attack.rs	/^pub struct PlayerAttack {$/;"	s
PlayerAttackSystem	src/systems/player_attack.rs	/^impl<'a> System<'a> for PlayerAttackSystem {$/;"	c
PlayerAttackSystem	src/systems/player_attack.rs	/^pub struct PlayerAttackSystem;$/;"	s
PlayerControlsSystem	src/systems/player_controls.rs	/^impl<'a> System<'a> for PlayerControlsSystem {$/;"	c
PlayerControlsSystem	src/systems/player_controls.rs	/^pub struct PlayerControlsSystem;$/;"	s
PlayerData	src/systems/enemy_ai.rs	/^struct PlayerData<'a> {$/;"	s
PlayerTakeDamageSystem	src/systems/player_take_damage.rs	/^impl<'a> System<'a> for PlayerTakeDamageSystem {$/;"	c
PlayerTakeDamageSystem	src/systems/player_take_damage.rs	/^pub struct PlayerTakeDamageSystem;$/;"	s
QTAVisitor	src/settings.rs	/^impl<'de> Visitor<'de> for QTAVisitor {$/;"	c
QTAVisitor	src/settings.rs	/^struct QTAVisitor;$/;"	s
Reaper	src/components/enemy.rs	/^    Reaper,$/;"	e	enum:EnemyType
ResetVelocity	src/settings.rs	/^    ResetVelocity,  \/\/ 1$/;"	e	enum:SettingsPlayerQuickTurnaround
Right	src/components/enemy.rs	/^    Right,$/;"	e	enum:Facing
Settings	src/settings.rs	/^pub struct Settings {$/;"	s
SettingsCamera	src/settings.rs	/^pub struct SettingsCamera {$/;"	s
SettingsEnemies	src/settings.rs	/^pub struct SettingsEnemies {$/;"	s
SettingsEnemy	src/settings.rs	/^pub struct SettingsEnemy {$/;"	s
SettingsEnemyTurret	src/settings.rs	/^pub struct SettingsEnemyTurret {$/;"	s
SettingsItem	src/settings.rs	/^pub struct SettingsItem {$/;"	s
SettingsItemSettings	src/settings.rs	/^pub struct SettingsItemSettings {$/;"	s
SettingsItems	src/settings.rs	/^pub struct SettingsItems {$/;"	s
SettingsLevelManager	src/settings.rs	/^pub struct SettingsLevelManager {$/;"	s
SettingsLoadingText	src/settings.rs	/^pub struct SettingsLoadingText {$/;"	s
SettingsPlayer	src/settings.rs	/^pub struct SettingsPlayer {$/;"	s
SettingsPlayerQuickTurnaround	src/settings.rs	/^impl<'de> Deserialize<'de> for SettingsPlayerQuickTurnaround {$/;"	c
SettingsPlayerQuickTurnaround	src/settings.rs	/^pub enum SettingsPlayerQuickTurnaround {$/;"	g
SidesTouching	src/systems/mod.rs	/^    impl<'a> SidesTouching {$/;"	c	module:helpers
SidesTouching	src/systems/mod.rs	/^    pub struct SidesTouching {$/;"	s	module:helpers
SolidTag	src/solid_tag.rs	/^impl Default for SolidTag {$/;"	c
SolidTag	src/solid_tag.rs	/^impl SolidTagTrait for SolidTag {$/;"	c
SolidTag	src/solid_tag.rs	/^pub enum SolidTag {$/;"	g
SpeedUp	src/components/item.rs	/^    SpeedUp,$/;"	e	enum:ItemType
Sprite	src/states/ingame/level_loader/mod.rs	/^    Sprite(SpriteData),$/;"	e	enum:Graphic
SpriteData	src/states/ingame/level_loader/mod.rs	/^struct SpriteData {$/;"	s
Startup	src/states/startup.rs	/^impl Default for Startup {$/;"	c
Startup	src/states/startup.rs	/^impl Startup {$/;"	c
Startup	src/states/startup.rs	/^impl<'a, 'b> State<CustomGameData<'a, 'b, CustomData>, StateEvent> for Startup {$/;"	c
Startup	src/states/startup.rs	/^pub struct Startup {$/;"	s
Storage	src/components/bullet.rs	/^    type Storage = VecStorage<Self>;$/;"	t	implementation:Bullet
Storage	src/components/enemy.rs	/^    type Storage = DenseVecStorage<Self>;$/;"	t	implementation:Enemy
Storage	src/components/enemy.rs	/^    type Storage = VecStorage<Self>;$/;"	t	implementation:EnemyAi
Storage	src/components/goal.rs	/^    type Storage = HashMapStorage<Self>;$/;"	t	implementation:Goal
Storage	src/components/heart.rs	/^    type Storage = VecStorage<Self>;$/;"	t	implementation:Heart
Storage	src/components/item.rs	/^    type Storage = VecStorage<Self>;$/;"	t	implementation:Item
Storage	src/components/player.rs	/^    type Storage = HashMapStorage<Self>;$/;"	t	implementation:Player
Storage	src/components/player_attack.rs	/^    type Storage = HashMapStorage<Self>;$/;"	t	implementation:PlayerAttack
SystemData	src/systems/bullet.rs	/^    type SystemData = ($/;"	t	implementation:BulletSystem
SystemData	src/systems/debug.rs	/^    type SystemData = Read<'a, FPSCounter>;$/;"	t	implementation:DebugSystem
SystemData	src/systems/enemy_ai.rs	/^    type SystemData = ($/;"	t	implementation:EnemyAiSystem
SystemData	src/systems/goal.rs	/^    type SystemData = ($/;"	t	implementation:GoalSystem
SystemData	src/systems/health_display.rs	/^    type SystemData = ($/;"	t	implementation:HealthDisplaySystem
SystemData	src/systems/player_attack.rs	/^    type SystemData = ($/;"	t	implementation:PlayerAttackSystem
SystemData	src/systems/player_controls.rs	/^    type SystemData = ($/;"	t	implementation:PlayerControlsSystem
SystemData	src/systems/player_take_damage.rs	/^    type SystemData = ($/;"	t	implementation:PlayerTakeDamageSystem
Texture	src/states/ingame/level_loader/mod.rs	/^    Texture(TextureData),$/;"	e	enum:Graphic
TextureData	src/states/ingame/level_loader/mod.rs	/^struct TextureData {}$/;"	s
Tracer	src/components/enemy.rs	/^    Tracer,$/;"	e	enum:EnemyAi
Turret	src/components/enemy.rs	/^    Turret(EnemyAiTurretData),$/;"	e	enum:EnemyAi
Turret	src/components/enemy.rs	/^    Turret,$/;"	e	enum:EnemyType
Value	src/settings.rs	/^    type Value = SettingsPlayerQuickTurnaround;$/;"	t	implementation:QTAVisitor
WallJump	src/components/item.rs	/^    WallJump,$/;"	e	enum:ItemType
World	src/world_helpers.rs	/^impl WorldHelpers for World {$/;"	c
WorldHelpers	src/world_helpers.rs	/^pub trait WorldHelpers {$/;"	i
acceleration	src/components/enemy.rs	/^    pub acceleration:     Vector,$/;"	m	struct:Enemy
acceleration	src/components/player.rs	/^    pub acceleration:               Vector,$/;"	m	struct:Player
acceleration	src/settings.rs	/^    pub acceleration:               Vector,$/;"	m	struct:SettingsPlayer
acceleration	src/settings.rs	/^    pub acceleration:     Vector,$/;"	m	struct:SettingsEnemy
active	src/components/player_attack.rs	/^    pub active: bool,$/;"	m	struct:PlayerAttack
air_acceleration	src/components/player.rs	/^    pub air_acceleration:           Vector,$/;"	m	struct:Player
air_quick_turnaround	src/components/player.rs	/^    pub air_quick_turnaround:       SettingsPlayerQuickTurnaround,$/;"	m	struct:Player
air_quick_turnaround	src/settings.rs	/^    pub air_quick_turnaround:       SettingsPlayerQuickTurnaround,$/;"	m	struct:SettingsPlayer
apply	src/components/item.rs	/^    pub fn apply(&self, player: &mut Player, settings: &SettingsItems) {$/;"	P	implementation:Item
base_speed	src/settings.rs	/^    pub base_speed: Vector,$/;"	m	struct:SettingsCamera
build	src/components/bullet.rs	/^    pub fn build(self) -> Bullet {$/;"	P	implementation:BulletBuilder
build	src/states/ingame/level_loader/mod.rs	/^    pub fn build<T>(&mut self, data: &mut StateData<CustomGameData<T>>) {$/;"	P	implementation:LevelLoader
build_camera	src/states/ingame/level_loader/mod.rs	/^    fn build_camera<T>(&mut self, data: &mut StateData<CustomGameData<T>>) {$/;"	P	implementation:LevelLoader
build_enemies	src/states/ingame/level_loader/mod.rs	/^    fn build_enemies<T>(&mut self, data: &mut StateData<CustomGameData<T>>) {$/;"	P	implementation:LevelLoader
build_game_data	src/main.rs	/^fn build_game_data<'a, 'b>($/;"	f
build_goal	src/states/ingame/level_loader/mod.rs	/^    fn build_goal<T>(&mut self, data: &mut StateData<CustomGameData<T>>) {$/;"	P	implementation:LevelLoader
build_items	src/states/ingame/level_loader/mod.rs	/^    fn build_items<T>(&mut self, data: &mut StateData<CustomGameData<T>>) {$/;"	P	implementation:LevelLoader
build_parallax	src/states/ingame/level_loader/mod.rs	/^    fn build_parallax<T>(&mut self, data: &mut StateData<CustomGameData<T>>) {$/;"	P	implementation:LevelLoader
build_player	src/states/ingame/level_loader/mod.rs	/^    fn build_player<T>(&mut self, data: &mut StateData<CustomGameData<T>>) {$/;"	P	implementation:LevelLoader
build_tiles	src/states/ingame/level_loader/mod.rs	/^    fn build_tiles<T>(&mut self, data: &mut StateData<CustomGameData<T>>) {$/;"	P	implementation:LevelLoader
bullet	src/components/mod.rs	/^mod bullet;$/;"	n
bullet	src/systems/mod.rs	/^mod bullet;$/;"	n
bullet_damage	src/components/player.rs	/^    pub bullet_damage:    u32,$/;"	m	struct:ItemsData
bullet_lifetime	src/components/enemy.rs	/^    pub bullet_lifetime:  Duration,$/;"	m	struct:EnemyAiTurretData
bullet_lifetime	src/components/player.rs	/^    pub bullet_lifetime:  Duration,$/;"	m	struct:ItemsData
bullet_shoot	src/settings.rs	/^    pub bullet_shoot: SettingsItem,$/;"	m	struct:SettingsItems
bullet_shoot_damage	src/settings.rs	/^    pub bullet_shoot_damage:      u32,$/;"	m	struct:SettingsItemSettings
bullet_shoot_lifetime_ms	src/settings.rs	/^    pub bullet_shoot_lifetime_ms: u64,$/;"	m	struct:SettingsItemSettings
bullet_shoot_size	src/settings.rs	/^    pub bullet_shoot_size:        Vector,$/;"	m	struct:SettingsItemSettings
bullet_shoot_velocity	src/settings.rs	/^    pub bullet_shoot_velocity:    Vector,$/;"	m	struct:SettingsItemSettings
bullet_size	src/components/enemy.rs	/^    pub bullet_size:      Vector,$/;"	m	struct:EnemyAiTurretData
bullet_size	src/components/player.rs	/^    pub bullet_size:      Vector,$/;"	m	struct:ItemsData
bullet_size	src/settings.rs	/^    pub bullet_size:      Vector,$/;"	m	struct:SettingsEnemyTurret
bullet_velocity	src/components/enemy.rs	/^    pub bullet_velocity:  Vector,$/;"	m	struct:EnemyAiTurretData
bullet_velocity	src/components/player.rs	/^    pub bullet_velocity:  Vector,$/;"	m	struct:ItemsData
bullet_velocity	src/settings.rs	/^    pub bullet_velocity:  Vector,$/;"	m	struct:SettingsEnemyTurret
camera	src/settings.rs	/^    pub camera:        SettingsCamera,$/;"	m	struct:Settings
camera_id	src/states/ingame/level_loader/mod.rs	/^    camera_id:     Option<Index>,$/;"	m	struct:LevelLoader
can_shoot	src/components/player.rs	/^    pub can_shoot:        bool,$/;"	m	struct:ItemsData
can_wall_jump	src/components/player.rs	/^    pub can_wall_jump:    bool,$/;"	m	struct:ItemsData
charger	src/settings.rs	/^    pub charger:     SettingsEnemy,$/;"	m	struct:SettingsEnemies
collides_with	src/solid_tag.rs	/^    fn collides_with(&self, other: &SolidTag) -> bool {$/;"	P	implementation:SolidTag
component_prelude	src/components/mod.rs	/^mod component_prelude {$/;"	n
components	src/main.rs	/^mod components;$/;"	n
cost	src/components/item.rs	/^    pub cost:      u32,$/;"	m	struct:Item
cost	src/settings.rs	/^    pub cost: u32,$/;"	m	struct:SettingsItem
create_heart	src/systems/health_display.rs	/^fn create_heart<'a>($/;"	f
created_at	src/components/bullet.rs	/^    pub created_at: Instant,$/;"	m	struct:Bullet
damage	src/components/bullet.rs	/^    damage:   Option<u32>,$/;"	m	struct:BulletBuilder
damage	src/components/bullet.rs	/^    pub damage:     u32,$/;"	m	struct:Bullet
damage	src/components/bullet.rs	/^    pub fn damage(mut self, damage: u32) -> Self {$/;"	P	implementation:BulletBuilder
damage	src/components/enemy.rs	/^    pub damage:           u32,$/;"	m	struct:Enemy
damage	src/components/player.rs	/^    pub damage:                     u32,$/;"	m	struct:Player
damage	src/settings.rs	/^    pub damage:                     u32,$/;"	m	struct:SettingsPlayer
damage	src/settings.rs	/^    pub damage:           u32,$/;"	m	struct:SettingsEnemy
damage_up	src/settings.rs	/^    pub damage_up:                u32,$/;"	m	struct:SettingsItemSettings
damage_up	src/settings.rs	/^    pub damage_up:    SettingsItem,$/;"	m	struct:SettingsItems
deadzone	src/settings.rs	/^    pub deadzone:   Vector,$/;"	m	struct:SettingsCamera
deal_damage_to	src/components/enemy.rs	/^    pub fn deal_damage_to(&self, player: &mut Player) {$/;"	P	implementation:Enemy
deal_damage_to	src/components/player.rs	/^    pub fn deal_damage_to(&self, enemy: &mut Enemy) {$/;"	P	implementation:Player
death_floor	src/settings.rs	/^    pub death_floor:   f32,$/;"	m	struct:Settings
debug	src/systems/mod.rs	/^mod debug;$/;"	n
decr_jump_strength	src/components/player.rs	/^    pub decr_jump_strength:         f32,$/;"	m	struct:Player
decr_jump_strength	src/settings.rs	/^    pub decr_jump_strength:         f32,$/;"	m	struct:SettingsPlayer
decr_velocity	src/settings.rs	/^    pub decr_velocity:              Vector,$/;"	m	struct:SettingsPlayer
decr_velocity	src/settings.rs	/^    pub decr_velocity:    Vector,$/;"	m	struct:SettingsEnemy
decrease_x_velocity_in_air	src/components/player.rs	/^    pub decrease_x_velocity_in_air: bool,$/;"	m	struct:Player
decrease_x_velocity_in_air	src/settings.rs	/^    pub decrease_x_velocity_in_air: bool,$/;"	m	struct:SettingsPlayer
default	src/components/enemy.rs	/^    fn default() -> Self {$/;"	P	implementation:EnemyAiTurretData
default	src/components/enemy.rs	/^    fn default() -> Self {$/;"	P	implementation:Facing
default	src/solid_tag.rs	/^    fn default() -> Self {$/;"	P	implementation:SolidTag
default	src/states/startup.rs	/^    fn default() -> Self {$/;"	P	implementation:Startup
default	src/systems/debug.rs	/^    fn default() -> Self {$/;"	P	implementation:DebugSystem
deserialize	src/settings.rs	/^    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>$/;"	P	implementation:SettingsPlayerQuickTurnaround
display_config	src/main.rs	/^    display_config: DisplayConfig,$/;"	m	struct:CustomData
enemies	src/settings.rs	/^    pub enemies:       SettingsEnemies,$/;"	m	struct:Settings
enemies_data	src/states/ingame/level_loader/mod.rs	/^    enemies_data:  Vec<EntityData>,$/;"	m	struct:LevelLoader
enemy	src/components/mod.rs	/^mod enemy;$/;"	n
enemy_ai	src/systems/mod.rs	/^mod enemy_ai;$/;"	n
enemy_type	src/components/enemy.rs	/^    pub enemy_type:       EnemyType,$/;"	m	struct:Enemy
expecting	src/settings.rs	/^    fn expecting(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	P	implementation:QTAVisitor
extra_jump	src/settings.rs	/^    pub extra_jump:   SettingsItem,$/;"	m	struct:SettingsItems
extra_jumps	src/components/player.rs	/^    pub extra_jumps:      u32,$/;"	m	struct:ItemsData
facing	src/components/enemy.rs	/^    pub facing:           Facing,$/;"	m	struct:EnemyAiTurretData
flying	src/settings.rs	/^    pub flying:      SettingsEnemy,$/;"	m	struct:SettingsEnemies
font_file	src/settings.rs	/^    pub font_file: String,$/;"	m	struct:SettingsLoadingText
font_size	src/settings.rs	/^    pub font_size: f32,$/;"	m	struct:SettingsLoadingText
from	src/components/item.rs	/^    fn from(name: T) -> Self {$/;"	f
gain_reward	src/components/player.rs	/^    pub fn gain_reward(&mut self, reward: u32) {$/;"	P	implementation:Player
goal	src/components/mod.rs	/^mod goal;$/;"	n
goal	src/systems/mod.rs	/^mod goal;$/;"	n
goal_data	src/states/ingame/level_loader/mod.rs	/^    goal_data:     Option<EntityData>,$/;"	m	struct:LevelLoader
graphic	src/states/ingame/level_loader/mod.rs	/^    pub graphic:    Option<Graphic>,$/;"	m	struct:EntityData
gravity	src/components/player.rs	/^    pub gravity:                    Vector,$/;"	m	struct:Player
gravity	src/settings.rs	/^    pub gravity:                    Vector,$/;"	m	struct:SettingsPlayer
gravity	src/settings.rs	/^    pub gravity:     Vector,$/;"	m	struct:SettingsEnemies
handle_attack	src/systems/player_controls.rs	/^fn handle_attack<'a>($/;"	f
handle_item_purchase	src/systems/player_controls.rs	/^fn handle_item_purchase<'a>($/;"	f
handle_jump	src/systems/player_controls.rs	/^fn handle_jump($/;"	f
handle_move	src/systems/player_controls.rs	/^fn handle_move($/;"	f
handle_on_ground_and_in_air	src/systems/player_controls.rs	/^fn handle_on_ground_and_in_air($/;"	f
handle_wall_cling	src/systems/player_controls.rs	/^fn handle_wall_cling($/;"	f
has_extra_jump	src/components/player.rs	/^    pub fn has_extra_jump(&self) -> bool {$/;"	P	implementation:Player
has_knockback	src/components/player.rs	/^    pub has_knockback:    bool,$/;"	m	struct:ItemsData
has_next_level	src/states/ingame/level_manager.rs	/^    pub fn has_next_level(&self) -> bool {$/;"	P	implementation:LevelManager
health	src/components/enemy.rs	/^    pub health:           u32,$/;"	m	struct:Enemy
health	src/components/player.rs	/^    pub health:                     u32,$/;"	m	struct:Player
health	src/settings.rs	/^    pub health:                     u32,$/;"	m	struct:SettingsPlayer
health	src/settings.rs	/^    pub health:           u32,$/;"	m	struct:SettingsEnemy
health_display	src/systems/mod.rs	/^mod health_display;$/;"	n
heart	src/components/mod.rs	/^mod heart;$/;"	n
helpers	src/states/ingame/level_loader/mod.rs	/^mod helpers;$/;"	n
helpers	src/states/mod.rs	/^mod helpers {$/;"	n
helpers	src/systems/mod.rs	/^mod helpers {$/;"	n
in_control	src/components/player.rs	/^    pub in_control:                 bool,$/;"	m	struct:Player
in_trigger_distance	src/components/enemy.rs	/^    pub fn in_trigger_distance(&self, distance: (f32, f32)) -> bool {$/;"	P	implementation:Enemy
index	src/components/heart.rs	/^    pub index: u32,$/;"	m	struct:Heart
ingame	src/states/mod.rs	/^mod ingame;$/;"	n
initialize_loading_text	src/states/startup.rs	/^    fn initialize_loading_text($/;"	P	implementation:Startup
inner_size	src/settings.rs	/^    pub inner_size: Vector,$/;"	m	struct:SettingsCamera
input	src/world_helpers.rs	/^    fn input(&self) -> Fetch<InputHandler<String, String>> {$/;"	P	implementation:World
input	src/world_helpers.rs	/^    fn input(&self) -> Fetch<InputHandler<String, String>>;$/;"	P	interface:WorldHelpers
input_manager	src/world_helpers.rs	/^    fn input_manager(&self) -> Fetch<InputManager> {$/;"	P	implementation:World
input_manager	src/world_helpers.rs	/^    fn input_manager(&self) -> Fetch<InputManager>;$/;"	P	interface:WorldHelpers
is_alive	src/components/enemy.rs	/^    pub fn is_alive(&self) -> bool {$/;"	P	implementation:Enemy
is_alive	src/components/player.rs	/^    pub fn is_alive(&self) -> bool {$/;"	P	implementation:Player
is_attacking	src/components/player.rs	/^    pub is_attacking:               bool,$/;"	m	struct:Player
is_dead	src/components/enemy.rs	/^    pub fn is_dead(&self) -> bool {$/;"	P	implementation:Enemy
is_dead	src/components/player.rs	/^    pub fn is_dead(&self) -> bool {$/;"	P	implementation:Player
is_finished	src/states/ingame/level_loader/mod.rs	/^    pub fn is_finished(&self) -> bool {$/;"	P	implementation:LevelLoader
is_finished_loading	src/states/startup.rs	/^    fn is_finished_loading(&self) -> bool {$/;"	P	implementation:Startup
is_moving	src/components/enemy.rs	/^    pub is_moving:                        bool,$/;"	m	struct:EnemyAiChargerData
is_outside_deadzone_x	src/components/enemy.rs	/^    pub fn is_outside_deadzone_x(&self, distance: f32) -> bool {$/;"	P	implementation:Enemy
is_outside_deadzone_y	src/components/enemy.rs	/^    pub fn is_outside_deadzone_y(&self, distance: f32) -> bool {$/;"	P	implementation:Enemy
is_touching_bottom	src/systems/mod.rs	/^        pub is_touching_bottom: bool,$/;"	m	struct:helpers::SidesTouching
is_touching_horizontally	src/systems/mod.rs	/^        pub fn is_touching_horizontally(&self) -> bool {$/;"	P	implementation:helpers::SidesTouching
is_touching_left	src/systems/mod.rs	/^        pub is_touching_left:   bool,$/;"	m	struct:helpers::SidesTouching
is_touching_right	src/systems/mod.rs	/^        pub is_touching_right:  bool,$/;"	m	struct:helpers::SidesTouching
is_touching_top	src/systems/mod.rs	/^        pub is_touching_top:    bool,$/;"	m	struct:helpers::SidesTouching
is_touching_vertically	src/systems/mod.rs	/^        pub fn is_touching_vertically(&self) -> bool {$/;"	P	implementation:helpers::SidesTouching
item	src/components/mod.rs	/^mod item;$/;"	n
item_type	src/components/item.rs	/^    pub item_type: ItemType,$/;"	m	struct:Item
items	src/settings.rs	/^    pub items:         SettingsItems,$/;"	m	struct:Settings
items_data	src/components/player.rs	/^    pub items_data:                 ItemsData,$/;"	m	struct:Player
items_data	src/states/ingame/level_loader/mod.rs	/^    items_data:    Vec<EntityData>,$/;"	m	struct:LevelLoader
jump_gravity	src/components/player.rs	/^    pub jump_gravity:               Vector,$/;"	m	struct:Player
jump_gravity	src/settings.rs	/^    pub jump_gravity:               Vector,$/;"	m	struct:SettingsPlayer
jump_strength	src/components/player.rs	/^    pub jump_strength:              f32,$/;"	m	struct:Player
jump_strength	src/settings.rs	/^    pub jump_strength:              f32,$/;"	m	struct:SettingsPlayer
jump_up	src/settings.rs	/^    pub jump_up:                  f32,$/;"	m	struct:SettingsItemSettings
jump_up	src/settings.rs	/^    pub jump_up:      SettingsItem,$/;"	m	struct:SettingsItems
knockback	src/components/enemy.rs	/^    pub knockback:        Vector,$/;"	m	struct:Enemy
knockback	src/components/player.rs	/^    pub knockback:        Vector,$/;"	m	struct:ItemsData
knockback	src/settings.rs	/^    pub knockback:        Vector,$/;"	m	struct:SettingsEnemy
knockback	src/settings.rs	/^    pub knockback:    SettingsItem,$/;"	m	struct:SettingsItems
knockback_strength	src/settings.rs	/^    pub knockback_strength:       Vector,$/;"	m	struct:SettingsItemSettings
last_fps_print	src/systems/debug.rs	/^    last_fps_print: Instant,$/;"	m	struct:DebugSystem
last_shot_at	src/components/enemy.rs	/^    pub last_shot_at:     Instant,$/;"	m	struct:EnemyAiTurretData
level_index	src/states/ingame/level_manager.rs	/^    pub level_index:       usize,$/;"	m	struct:LevelManager
level_loader	src/states/ingame/mod.rs	/^mod level_loader;$/;"	n
level_manager	src/settings.rs	/^    pub level_manager: SettingsLevelManager,$/;"	m	struct:Settings
level_manager	src/states/ingame/mod.rs	/^    level_manager: LevelManager,$/;"	m	struct:Ingame
level_manager	src/states/ingame/mod.rs	/^mod level_manager;$/;"	n
level_names	src/settings.rs	/^    pub level_names: Vec<String>,$/;"	m	struct:SettingsLevelManager
level_size	src/states/ingame/level_loader/mod.rs	/^    level_size:    Option<Vector>,$/;"	m	struct:LevelLoader
levels_dir	src/settings.rs	/^    pub levels_dir:  String,$/;"	m	struct:SettingsLevelManager
lifetime	src/components/bullet.rs	/^    lifetime: Option<Duration>,$/;"	m	struct:BulletBuilder
lifetime	src/components/bullet.rs	/^    pub fn lifetime(mut self, lifetime: Duration) -> Self {$/;"	P	implementation:BulletBuilder
lifetime	src/components/bullet.rs	/^    pub lifetime:   Duration,$/;"	m	struct:Bullet
load_current_level	src/states/ingame/level_manager.rs	/^    pub fn load_current_level($/;"	P	implementation:LevelManager
load_level	src/states/ingame/level_loader/mod.rs	/^    pub fn load_level<T>(&mut self, filepath: T)$/;"	P	implementation:LevelLoader
load_level_data	src/states/ingame/level_loader/mod.rs	/^    fn load_level_data(&mut self, json: &JsonValue) {$/;"	P	implementation:LevelLoader
load_next_level	src/states/ingame/level_manager.rs	/^    pub fn load_next_level($/;"	P	implementation:LevelManager
load_objects	src/states/ingame/level_loader/mod.rs	/^    fn load_objects(&mut self, json: &JsonValue) {$/;"	P	implementation:LevelLoader
load_settings	src/states/startup.rs	/^fn load_settings() -> Settings {$/;"	f
load_tiles	src/states/ingame/level_loader/mod.rs	/^    fn load_tiles(&mut self, json: &JsonValue) {$/;"	P	implementation:LevelLoader
loading_text	src/settings.rs	/^    pub loading_text:  SettingsLoadingText,$/;"	m	struct:Settings
loading_text_entity	src/states/startup.rs	/^    loading_text_entity: Option<Entity>,$/;"	m	struct:Startup
main	src/main.rs	/^fn main() -> amethyst::Result<()> {$/;"	f
max_velocity	src/components/enemy.rs	/^    pub max_velocity:     (Option<f32>, Option<f32>),$/;"	m	struct:Enemy
max_velocity	src/components/player.rs	/^    pub max_velocity:               (Option<f32>, Option<f32>),$/;"	m	struct:Player
max_velocity	src/settings.rs	/^    pub max_velocity:               (Option<f32>, Option<f32>),$/;"	m	struct:SettingsPlayer
max_velocity	src/settings.rs	/^    pub max_velocity:     (Option<f32>, Option<f32>),$/;"	m	struct:SettingsEnemy
min_jump_velocity	src/components/player.rs	/^    pub min_jump_velocity:          f32,$/;"	m	struct:Player
min_jump_velocity	src/settings.rs	/^    pub min_jump_velocity:          f32,$/;"	m	struct:SettingsPlayer
music_volume	src/settings.rs	/^    pub music_volume:  f32,$/;"	m	struct:Settings
new	src/components/bullet.rs	/^    pub fn new() -> BulletBuilder {$/;"	P	implementation:Bullet
new	src/components/enemy.rs	/^    pub fn new(enemy_type: EnemyType, settings: SettingsEnemy) -> Self {$/;"	P	implementation:Enemy
new	src/components/heart.rs	/^    pub fn new(index: u32) -> Self {$/;"	P	implementation:Heart
new	src/components/item.rs	/^    pub fn new<T>(name: T, items_settings: &SettingsItems) -> Self$/;"	P	implementation:Item
new	src/components/player.rs	/^    pub fn new(settings: SettingsPlayer) -> Self {$/;"	P	implementation:Player
new	src/states/ingame/level_loader/mod.rs	/^    pub fn new(settings: SettingsLevelManager) -> Self {$/;"	P	implementation:LevelLoader
new	src/states/ingame/level_manager.rs	/^    pub fn new(settings: SettingsLevelManager) -> Self {$/;"	P	implementation:LevelManager
new	src/states/ingame/mod.rs	/^    pub fn new(settings: Settings) -> Self {$/;"	P	implementation:Ingame
new	src/systems/mod.rs	/^        pub fn new($/;"	P	implementation:helpers::SidesTouching
new_ui_transform	src/states/mod.rs	/^    pub fn new_ui_transform<T: ToString>($/;"	f	module:helpers
new_with_collisions_mut	src/systems/mod.rs	/^        pub fn new_with_collisions_mut($/;"	P	implementation:helpers::SidesTouching
next_level	src/components/goal.rs	/^    pub next_level: bool,$/;"	m	struct:Goal
normal	src/settings.rs	/^    pub normal:      SettingsEnemy,$/;"	m	struct:SettingsEnemies
on_start	src/states/ingame/mod.rs	/^    fn on_start(&mut self, mut data: StateData<CustomGameData<CustomData>>) {$/;"	P	implementation:Ingame
on_start	src/states/startup.rs	/^    fn on_start(&mut self, mut data: StateData<CustomGameData<CustomData>>) {$/;"	P	implementation:Startup
owner	src/components/bullet.rs	/^    owner:    Option<BulletOwner>,$/;"	m	struct:BulletBuilder
owner	src/components/bullet.rs	/^    pub fn owner(mut self, owner: BulletOwner) -> Self {$/;"	P	implementation:BulletBuilder
owner	src/components/bullet.rs	/^    pub owner:      BulletOwner,$/;"	m	struct:Bullet
parallax_data	src/states/ingame/level_loader/mod.rs	/^    parallax_data: Vec<EntityData>,$/;"	m	struct:LevelLoader
parse_string_to_vector	src/states/ingame/level_loader/mod.rs	/^fn parse_string_to_vector<T>(string: T) -> Vector$/;"	f
play_current_song	src/states/ingame/mod.rs	/^    fn play_current_song($/;"	P	implementation:Ingame
player	src/components/mod.rs	/^mod player;$/;"	n
player	src/settings.rs	/^    pub player:        SettingsPlayer,$/;"	m	struct:Settings
player	src/systems/enemy_ai.rs	/^    pub player: &'a mut Player,$/;"	m	struct:PlayerData
player_attack	src/components/mod.rs	/^mod player_attack;$/;"	n
player_attack	src/systems/mod.rs	/^mod player_attack;$/;"	n
player_checkpoint_opt	src/states/ingame/level_manager.rs	/^    player_checkpoint_opt: Option<Player>,$/;"	m	struct:LevelManager
player_controls	src/systems/mod.rs	/^mod player_controls;$/;"	n
player_data	src/states/ingame/level_loader/mod.rs	/^    player_data:   Option<EntityData>,$/;"	m	struct:LevelLoader
player_id	src/states/ingame/level_loader/mod.rs	/^    player_id:     Option<Index>,$/;"	m	struct:LevelLoader
player_take_damage	src/systems/mod.rs	/^mod player_take_damage;$/;"	n
pos	src/states/ingame/level_loader/mod.rs	/^    pub pos:        Vector,$/;"	m	struct:EntityData
pos	src/systems/enemy_ai.rs	/^    pub pos:    Vector,$/;"	m	struct:PlayerData
prelude	src/components/bullet.rs	/^pub mod prelude {$/;"	n
prelude	src/components/enemy.rs	/^pub mod prelude {$/;"	n
prelude	src/components/item.rs	/^pub mod prelude {$/;"	n
prelude	src/components/mod.rs	/^pub mod prelude {$/;"	n
prelude	src/settings.rs	/^pub mod prelude {$/;"	n
prelude	src/states/ingame/level_manager.rs	/^pub mod prelude {$/;"	n
prelude	src/states/mod.rs	/^pub mod prelude {$/;"	n
prelude	src/systems/mod.rs	/^pub mod prelude {$/;"	n
previous_health	src/systems/health_display.rs	/^    previous_health: u32,$/;"	m	struct:HealthDisplaySystem
properties	src/states/ingame/level_loader/mod.rs	/^    pub properties: JsonValue,$/;"	m	struct:EntityData
quick_turnaround	src/components/player.rs	/^    pub quick_turnaround:           SettingsPlayerQuickTurnaround,$/;"	m	struct:Player
quick_turnaround	src/settings.rs	/^    pub quick_turnaround:           SettingsPlayerQuickTurnaround,$/;"	m	struct:SettingsPlayer
read_file	src/resource_helpers.rs	/^pub fn read_file<P>(path: P) -> Result<String, io::Error>$/;"	f
reaper	src/settings.rs	/^    pub reaper:      SettingsEnemy,$/;"	m	struct:SettingsEnemies
register_components	src/states/startup.rs	/^fn register_components(world: &mut World) {$/;"	f
resource	src/resource_helpers.rs	/^pub fn resource<T: ToString>(path: T) -> String {$/;"	f
resource_helpers	src/main.rs	/^mod resource_helpers;$/;"	n
resources_dir	src/resource_helpers.rs	/^pub fn resources_dir() -> String {$/;"	f
restart_level	src/states/ingame/level_manager.rs	/^    pub fn restart_level($/;"	P	implementation:LevelManager
reward	src/components/enemy.rs	/^    pub reward:           u32,$/;"	m	struct:Enemy
reward	src/settings.rs	/^    pub reward:           u32,$/;"	m	struct:SettingsEnemy
run	src/systems/bullet.rs	/^    fn run($/;"	P	implementation:BulletSystem
run	src/systems/debug.rs	/^    fn run(&mut self, fps_counter: Self::SystemData) {$/;"	P	implementation:DebugSystem
run	src/systems/enemy_ai.rs	/^    fn run($/;"	P	implementation:EnemyAiSystem
run	src/systems/goal.rs	/^    fn run($/;"	P	implementation:GoalSystem
run	src/systems/health_display.rs	/^    fn run($/;"	P	implementation:HealthDisplaySystem
run	src/systems/player_attack.rs	/^    fn run($/;"	P	implementation:PlayerAttackSystem
run	src/systems/player_controls.rs	/^    fn run($/;"	P	implementation:PlayerControlsSystem
run	src/systems/player_take_damage.rs	/^    fn run($/;"	P	implementation:PlayerTakeDamageSystem
run_for_charger_ai	src/systems/enemy_ai.rs	/^fn run_for_charger_ai($/;"	f
run_for_tracer_ai	src/systems/enemy_ai.rs	/^fn run_for_tracer_ai<'a>($/;"	f
run_for_turret_ai	src/systems/enemy_ai.rs	/^fn run_for_turret_ai($/;"	f
set_player_checkpoint	src/states/ingame/level_manager.rs	/^    pub fn set_player_checkpoint($/;"	P	implementation:LevelManager
settings	src/components/item.rs	/^    pub fn settings(&self, settings: &SettingsItems) -> SettingsItem {$/;"	P	implementation:ItemType
settings	src/main.rs	/^mod settings;$/;"	n
settings	src/settings.rs	/^    pub settings:     SettingsItemSettings,$/;"	m	struct:SettingsItems
settings	src/states/ingame/level_loader/mod.rs	/^    settings:      SettingsLevelManager,$/;"	m	struct:LevelLoader
settings	src/states/ingame/level_manager.rs	/^    settings:              SettingsLevelManager,$/;"	m	struct:LevelManager
settings	src/world_helpers.rs	/^    fn settings(&self) -> Settings {$/;"	P	implementation:World
settings	src/world_helpers.rs	/^    fn settings(&self) -> Settings;$/;"	P	interface:WorldHelpers
shoot_bullet	src/systems/player_controls.rs	/^fn shoot_bullet<'a>($/;"	f
shot_interval_ms	src/components/enemy.rs	/^    pub shot_interval_ms: u64,$/;"	m	struct:EnemyAiTurretData
shot_interval_ms	src/settings.rs	/^    pub shot_interval_ms: u64,$/;"	m	struct:SettingsEnemyTurret
size	src/settings.rs	/^    pub size:                       Vector,$/;"	m	struct:SettingsPlayer
size	src/settings.rs	/^    pub size:       Vector,$/;"	m	struct:SettingsCamera
size	src/states/ingame/level_loader/mod.rs	/^    pub size:       Vector,$/;"	m	struct:EntityData
slide_strength	src/components/player.rs	/^    pub slide_strength:             f32,$/;"	m	struct:Player
slide_strength	src/settings.rs	/^    pub slide_strength:             f32,$/;"	m	struct:SettingsPlayer
solid_tag	src/main.rs	/^mod solid_tag;$/;"	n
speed_up	src/settings.rs	/^    pub speed_up:     SettingsItem,$/;"	m	struct:SettingsItems
speed_up_acceleration_up	src/settings.rs	/^    pub speed_up_acceleration_up: f32,$/;"	m	struct:SettingsItemSettings
speed_up_max_velocity_up	src/settings.rs	/^    pub speed_up_max_velocity_up: f32,$/;"	m	struct:SettingsItemSettings
sprite_id	src/components/item.rs	/^    pub fn sprite_id(&self) -> usize {$/;"	P	implementation:ItemType
sprite_id	src/states/ingame/level_loader/mod.rs	/^    pub sprite_id:        usize,$/;"	m	struct:SpriteData
sprite_sheet_handle_and_sprite_render	src/components/item.rs	/^    pub fn sprite_sheet_handle_and_sprite_render($/;"	P	implementation:ItemType
spritesheet_path	src/states/ingame/level_loader/mod.rs	/^    pub spritesheet_path: String,$/;"	m	struct:SpriteData
start_logger	src/main.rs	/^fn start_logger() {$/;"	f
startup	src/states/mod.rs	/^mod startup;$/;"	n
state_prelude	src/states/mod.rs	/^mod state_prelude {$/;"	n
states	src/main.rs	/^mod states;$/;"	n
stop_moving_when_colliding_sides	src/components/enemy.rs	/^    pub stop_moving_when_colliding_sides: Option<Vec<Side>>,$/;"	m	struct:EnemyAiChargerData
system_prelude	src/systems/mod.rs	/^mod system_prelude {$/;"	n
systems	src/main.rs	/^mod systems;$/;"	n
take_damage	src/components/enemy.rs	/^    pub fn take_damage(&mut self, damage: u32) {$/;"	P	implementation:Enemy
take_damage	src/components/player.rs	/^    pub fn take_damage(&mut self, damage: u32) {$/;"	P	implementation:Player
text	src/settings.rs	/^    pub text:      String,$/;"	m	struct:SettingsLoadingText
tile_size	src/settings.rs	/^    pub tile_size:   Vector,$/;"	m	struct:SettingsLevelManager
tiles_data	src/states/ingame/level_loader/mod.rs	/^    tiles_data:    Vec<EntityData>,$/;"	m	struct:LevelLoader
transform_xyz_for	src/systems/health_display.rs	/^fn transform_xyz_for(i: u32, offset: Vector) -> (f32, f32, f32) {$/;"	f
trigger_distance	src/components/enemy.rs	/^    pub trigger_distance: Vector,$/;"	m	struct:Enemy
trigger_distance	src/settings.rs	/^    pub trigger_distance: Vector,$/;"	m	struct:SettingsEnemy
turret	src/settings.rs	/^    pub turret:      SettingsEnemy,$/;"	m	struct:SettingsEnemies
turret_data	src/settings.rs	/^    pub turret_data: SettingsEnemyTurret,$/;"	m	struct:SettingsEnemies
update	src/states/ingame/mod.rs	/^    fn update($/;"	P	implementation:Ingame
update	src/states/startup.rs	/^    fn update($/;"	P	implementation:Startup
used_extra_jumps	src/components/player.rs	/^    pub used_extra_jumps: u32,$/;"	m	struct:ItemsData
velocity	src/components/enemy.rs	/^    pub velocity:                         Vector,$/;"	m	struct:EnemyAiChargerData
visit_i16	src/settings.rs	/^    fn visit_i16<E>(self, value: i16) -> Result<Self::Value, E>$/;"	P	implementation:QTAVisitor
visit_i32	src/settings.rs	/^    fn visit_i32<E>(self, value: i32) -> Result<Self::Value, E>$/;"	P	implementation:QTAVisitor
visit_i64	src/settings.rs	/^    fn visit_i64<E>(self, value: i64) -> Result<Self::Value, E>$/;"	P	implementation:QTAVisitor
visit_i8	src/settings.rs	/^    fn visit_i8<E>(self, value: i8) -> Result<Self::Value, E>$/;"	P	implementation:QTAVisitor
wall_jump	src/settings.rs	/^    pub wall_jump:    SettingsItem,$/;"	m	struct:SettingsItems
wall_jump_strength	src/components/player.rs	/^    pub wall_jump_strength:         Vector,$/;"	m	struct:Player
wall_jump_strength	src/settings.rs	/^    pub wall_jump_strength:         Vector,$/;"	m	struct:SettingsPlayer
world_helpers	src/main.rs	/^mod world_helpers;$/;"	n

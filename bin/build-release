#!/bin/bash
# Build the project in release mode.
# The generated release directory and zip file name is in the for of:
#   "${RELEASE_FILE_PREFIX}${<target-name>}${RELEASE_FILE_SUFFIX}-${RELEASE_VERSION}"
# Optional environment variables:
#   $RELEASE_TARGETS
#     A space-separated list of build target identifiers;
#     valid identifiers are: "default" (host's target triple), "linux", "windows".
#     DEFAULT: "linux windows"
#   $RELEASE_DIR
#     Directory path for the generated releases to be saved to.
#     DEFAULT: "releases/" directory next to the project root.
#   $RELEASE_VERSION
#     Version number which is used in the generated release directory and zip file names.
#     DEFAULT: Dynamically figures out the highest version number in the releases directory
#              and uses its increment as the version. 0 if no version numbers were found.
#   $RELEASE_FILE_PREFIX
#     Prefix string for the generated release directory and zip file.
#     DEFAULT: "ld44-postjam-"
#   $RELEASE_FILE_SUFFIX
#     Suffix string for the generated release directory and zip file.
#     DEFAULT: ""
#   $RELEASE_EXE_NAME
#     Name of the executable generated by cargo/rust.
#     DEFAULT: "LD44" or "LD44.exe" (for windows)
#   $RELEASE_RESOURCES_DIR
#     Path to the resources directory.
#     DEFAULT: "${ROOT}/resources"

ROOT="$( cd $(dirname $0)/..; pwd )"
source "$ROOT/bin/util.sh"

set -e

WINDOWS_TARGET="x86_64-pc-windows-gnu"

function get_latest_version {
  check "sed"
  shopt -s nullglob
  [ -d "$RELEASE_DIR" ] || err "Directory '$RELEASE_DIR' doesn't exist."
  highest=0
  for file in "$RELEASE_DIR"/*.zip; do
    vers="$( echo "$file" | grep -Eo '([0-9]\.?)+\.zip' | sed 's/\.zip//' )"
    if [ -n "$vers" ]; then
      vers_num="${vers//./}"
      highest_num="${highest//./}"
      [ $vers_num -gt $highest_num ] && highest="$vers"
    fi
  done
  new_vers="$( echo "$highest" | sed -E 's/(.*)([0-9]+)$/echo "\1$((\2+1))"/e' )"
  echo "$new_vers"
}

function get_filename_for_target {
  target="$1"
  [ -z "$target" ] && err "No target name given to function \`$0\`."
  echo "${RELEASE_FILE_PREFIX}${target}${RELEASE_FILE_SUFFIX}-${RELEASE_VERSION}"
}

function mk_archive {
  path="$1"
  [ -z "$1" ] && err "No path given to function \`$0\`."
  check "zip" && check "dirname" && check "basename"
  dir="$( dirname "$path" )"
  [ -n "$dir" ] && cd "$dir"
  filename="$( basename "$path" )"
  msg "Zipping directory..."
  try_run "zip -r ${filename}.zip $filename"
  try_run "rm -rf $filename"
}

[ -z "$RELEASE_TARGETS" ] && RELEASE_TARGETS="linux windows"
RELEASE_TARGETS=($RELEASE_TARGETS)
[ -z "$RELEASE_DIR" ] && RELEASE_DIR="${ROOT}/releases"
[ -d "$RELEASE_DIR" ] || mkdir -p "$RELEASE_DIR"
[ -z "$RELEASE_VERSION" ] && RELEASE_VERSION="$( get_latest_version )"
[ -z "$RELEASE_FILE_PREFIX" ] && RELEASE_FILE_PREFIX="ld44-postjam-"
[ -z "$RELEASE_FILE_SUFFIX" ] && RELEASE_FILE_SUFFIX=""
[ -z "$RELEASE_EXE_NAME" ] && RELEASE_EXE_NAME="LD44"
[ -z "$RELEASE_RESOURCES_DIR" ] && RELEASE_RESOURCES_DIR="${ROOT}/resources"

check "cargo"

for target in "${RELEASE_TARGETS[@]}"; do
  target_display="$( colored "$COLOR_CODE" "$target" )"
  msg_strong "Building release for $target_display"
  filename="$( get_filename_for_target "$target" )"

  case "$target" in
    "linux" | "default")
      msg "Compiling..."
      try_run "cargo +stable build --release"
      cd "$RELEASE_DIR"
      mkdir "$filename"

      msg "Copying executable and resources..."
      try_run "cp ../target/release/${RELEASE_EXE_NAME} ./${filename}"
      try_run "cp -r $RELEASE_RESOURCES_DIR ./${filename}"

      mk_archive "$filename"
      ;;

    "windows")
      msg "Compiling..."
      try_run "cargo +stable build --release --target $WINDOWS_TARGET"
      cd "$RELEASE_DIR"
      mkdir "$filename"

      msg "Copying executable and resources..."
      try_run "cp ../target/${WINDOWS_TARGET}/release/${RELEASE_EXE_NAME}.exe ./${filename}"
      try_run "cp -r $RELEASE_RESOURCES_DIR ./${filename}"

      mk_archive "$filename"
      ;;

    *)
      err "Target '$target' is not valid"
      ;;
  esac

  msg_strong "Created release for $target_display - $( colored "$COLOR_CODE" "${RELEASE_DIR}/${filename}.zip" )"
done
